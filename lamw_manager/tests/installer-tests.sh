#!/bin/bash
TEST_MODULES_PATH=$(dirname $(realpath $0))
source $TEST_MODULES_PATH/tests-header
export ROOT_LAMW=~/LAMW


testGetStatusInstalation(){
	getStatusInstalation
	assertTrue '[There is no $LAMW_INSTALL_LOG ]' $?

	mkdir -p $LAMW4LINUX_HOME
	echo "Generate LAMW_INSTALL_VERSION=$LAMW_INSTALL_VERSION"> $LAMW_INSTALL_LOG
	getStatusInstalation
	assertFalse '[There is $LAMW_INSTALL_VERSION]' $?
}

testGetImplicitInstall(){
	rm -rf $LAMW_INSTALL_LOG
	getImplicitInstall
	assertEquals '[Implicit actions mode ]' $AUTO_START_LAMW4LINUX 1

	echo "Generate LAMW_INSTALL_VERSION=$LAMW_INSTALL_VERSION"> $LAMW_INSTALL_LOG
	#simulate needUpdate deps
	isUpdateLAMWDeps(){
		return 0;
	}

	getImplicitInstall
	assertEquals '[Implicit actions mode  install]' $LAMW_IMPLICIT_ACTION_MODE 1

	isUpdateLAMWDeps(){
		return 1
	}

	getImplicitInstall
	assertEquals '[Implicit actions mode Need Upgrade ]' $LAMW_IMPLICIT_ACTION_MODE 0

	echo "Generate LAMW_INSTALL_VERSION=0.5.9"> $LAMW_INSTALL_LOG
	getImplicitInstall
	assertEquals '[Implicit actions mode Need upgrade to latest lamw_manager ]' $LAMW_IMPLICIT_ACTION_MODE 0

	echo "Generate LAMW_INSTALL_VERSION=0.8.0"> $LAMW_INSTALL_LOG
	ret=$(getImplicitInstall)
	expected_message="${VERMELHO}Your LAMW development environment was generated by a newer version of LAMW Manager!${NORMAL}"
	assertEquals '[Generate by newer LAMW Manager]' "$expected_message" "$ret"
}

testCheckLAMWManagerVersion(){
	echo "Generate LAMW_INSTALL_VERSION=0.5.9"> $LAMW_INSTALL_LOG
	ret=$(checkLAMWManagerVersion)
	[ $ret -ge 0 ]
	assertTrue $?

}

testRepair(){
	rm -rf $LAMW_INSTALL_LOG
	Repair 
	assertTrue '[No need repair, not installed]' $?


	#simulate need install dependencies  (using fake commands)
	which(){ return 1; }	

	installSystemDependencies(){ unset which ;}					

	LAMW4LinuxPostConfig(){ : ; }
	echo "Generate LAMW_INSTALL_VERSION=0.5.9"> $LAMW_INSTALL_LOG
	Repair
	assertFalse '[Need repair - reinstall system tools ]' $?

	#simulate no existent $LAMW_IDE_HOME_CFG
	which(){ : ;}
	Repair
	assertFalse '[Need repair - need run LAMW4LinuxPostConfig ]' $?
	unset which

}

testBuildLazarus(){
	initROOT_LAMW
	initLAMWUserConfig
	mkdir $LAMW4LINUX_HOME/usr/{lib,bin,local} $LAMW_IDE_HOME -p
	mkdir -p $LAMW_IDE_HOME/tools/install/
	echo "echo $LAZARUS_STABLE_VERSION" >$LAMW_IDE_HOME/tools/install/get_lazarus_version.sh
	chmod +x $LAMW_IDE_HOME/tools/install/get_lazarus_version.sh
	make(){ 
		cp $(which echo) $LAMW_IDE_HOME/lazbuild
		cp $(which echo) $LAMW_IDE_HOME/lazarus
		cp $(which echo) $LAMW_IDE_HOME/startlazarus
	}	
	BuildLazarusIDE
	assertTrue '[Build lazarus as success]' $?
	rm $LAMW_IDE_HOME/lazbuild $LAMW_IDE_HOME/lazarus $LAMW_IDE_HOME/startlazarus

	make(){
		cp $(which echo) $LAMW_IDE_HOME/lazbuild
		cp $(which echo) $LAMW_IDE_HOME/lazarus
		cp $(which echo) $LAMW_IDE_HOME/startlazarus
		return 1
	}


	ret=$(BuildLazarusIDE )
	assertFalse '[Build lazarus as failed]' $?
	unset make

}

testInstallLAMWPackages(){
	setLazBuild(){
		echo -e "#!/bin/bash\necho lazbuild \$@\nsleep 0.2\n exit $1" > $LAMW_IDE_HOME/lazbuild
	}
	local laz_path=$ANDROID_HOME/lazandroidmodulewizard/
	LAMW_PACKAGES=( 
		$laz_path/{android_bridges/tfpandroidbridge_pack.lpk,android_wizard/lazandroidwizardpack.lpk,ide_tools/amw_ide_tools.lpk}
    )
	setLazBuild 0
	installLAMWPackages
	assertTrue '[Install package as success]' $?

	setLazBuild 1
	installLAMWPackages
	assertEquals '[Install package as failed]' 1 $EXIT_STATUS 
}

. $(which shunit2)