#!/bin/bash
#-------------------------------------------------------------------------------------------------#
#Universidade federal de Mato Grosso (Alma Mater)
#Course: Science Computer
#Version: 0.4.0
#Date: 06/17/2021
#Description:The "lamw_manager" is part of the core of LAMW Manager. This script is a wrapper for "core/lamw-instal.sh"
#-------------------------------------------------------------------------------------------------#

export DEBUG=0
export ARGS="$*"
export LAMW_MGR_INSTALL="core/lamw-mgr.sh"
export LAMW_MGR_CORE=""
export USE_PKEXEC=0
export ENTER_TO_EXIT=0
export CALL_BASH="bash"
export EXIT_STATUS=0
export LAMW_MANAGER_LOCK=/tmp/lamw_manager.lock
export LAMW_MANAGER_ENV=(LAMW_USER=$USER LAMW_USER_HOME=$HOME LAMW_MANAGER_LOCK=$LAMW_MANAGER_LOCK)


#Get Directory of LAMW Manager Core
if [ -e "$PWD/$LAMW_MGR_INSTALL" ]; then
	export LAMW_MGR_CORE="$PWD"
else
	export LAMW_MGR_CORE=$0
	export LAMW_MGR_CORE=${LAMW_MGR_CORE%/lamw_manager*} 
fi

export LAMW_MGR_INSTALL="$LAMW_MGR_CORE/$LAMW_MGR_INSTALL"
source $LAMW_MGR_CORE/core/headers/common-shell.sh

#Del lamw-overrides
DelTempFiles(){ 
	[ -e $LAMW_MANAGER_LOCK ] &&  rm $LAMW_MANAGER_LOCK
}

#Check if $USER is a sudo member 
CheckUserIsSudo(){
	grep sudo /etc/group  | grep $USER > /dev/null 2>&1
	if [ $? != 0 ]; then 
		export USE_PKEXEC=1
	fi
}

CheckFlags(){
	newPtr ref_flag="$1"
	local flagFind=$2
	echo "$ARGS" | grep "$flagFind" > /dev/null
	if [ $? = 0 ]; then 
		export ref_flag=1
		export ARGS=${ARGS//$flagFind/} # remove todas as ocorrencias de DEBUG=1
	fi
}

#Check if DEBUG flag is set 
getBashCMD(){
	if [ $DEBUG = 1 ]; then
		export CALL_BASH="$CALL_BASH -x"
	fi
}

#Run LAMW Manager as sudo (default)

CheckUseLamw_manager_setup(){
	if [ "$USE_SETUP" = "1" ];
	then 
		LAMW_MANAGER_ENV+=("USE_SETUP=1")
	else
		LAMW_MANAGER_ENV+=("USE_SETUP=0")
	fi
}

CheckLocalRootLAMW(){
	if [ "$LOCAL_ROOT_LAMW" != "" ]; then
		LAMW_MANAGER_ENV+=("LOCAL_ROOT_LAMW=$LOCAL_ROOT_LAMW")

	else 
		isVariabelDeclared LOCAL_ROOT_LAMW
		if [ $? = 0 ]; then
			echo "${VERMELHO}Fatal error: LOCAL_ROOT_LAMW is declared as empty!${NORMAL}"
			exit 1
		fi
	fi 
}

RunAsSudo(){
	CheckUseLamw_manager_setup
	sudo -i env ${LAMW_MANAGER_ENV[@]} $CALL_BASH "$LAMW_MGR_INSTALL" $*
	export EXIT_STATUS=$?
}

#Run LAMW Manager as Police Kit
RunAsPolkit(){
	LAMW_MANAGER_ENV+=(DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY)
	CheckUseLamw_manager_setup
	pkexec  env ${LAMW_MANAGER_ENV[@]} $CALL_BASH  "$LAMW_MGR_INSTALL" $*
	export EXIT_STATUS=$?
	if [  $ENTER_TO_EXIT = 1 ]; then
		echo "press enter to exit ...";read
	fi
}

#get install status and exit
getStatus(){
	if [ -e ~/LAMW/lamw4linux/lamw-install.log ]; then
		exit 0
	else
		exit 1
	fi
}
#Wrapper function to Run LAMW Manager
Run(){
	echo "$*" | grep "get-status" > /dev/null
	if [ $? = 0 ]; then  #get-status is parameter call getStatus
		getStatus
	fi
	
	IsFileBusy lamw_manager $LAMW_MANAGER_LOCK
	exec 3>$LAMW_MANAGER_LOCK
	echo "" >&3
	getBashCMD
	if [ $USE_PKEXEC = 1 ]; then
		tty | grep 'tty[0-9]'>/dev/null
		if [ $? != 0 ]; then 
			RunAsPolkit $*
		else
			echo "${VERMELHO}FATAL ERROR: This tool cannot run in $(tty)${NORMAL}"
			echo "" 
			export EXIT_STATUS=2
		fi

	else
		RunAsSudo $*
	fi
}

#main function
main(){
	
	IsUserRoot "lamw_manager"
	CheckFlags DEBUG "DEBUG=1"
	CheckFlags USE_PKEXEC "PKEXEC=1"
	CheckFlags ENTER_TO_EXIT "ENTER=1"
	CheckUserIsSudo
	CheckLocalRootLAMW
	Run $ARGS
	DelTempFiles
}


main $*
exec 3>&-
exit $EXIT_STATUS 
