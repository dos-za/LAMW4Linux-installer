#!/usr/bin/env bash
#-------------------------------------------------------------------------------------------------#
#Universidade federal de Mato Grosso (Alma Mater)
#Course: Science Computer
#Version: 0.5.2
#Date: 12/06/2022
#Description:The "lamw_manager" is part of the core of LAMW Manager. This script is a wrapper for "core/lamw-instal.sh"
#-------------------------------------------------------------------------------------------------#


#Get Directory of LAMW Manager Core
if [ -e "$PWD/lamw_manager" ] && [ ! -d "$PWD/lamw_manager" ]; then
	export LAMW_MGR_CORE="$PWD"
else
	export LAMW_MGR_CORE="$(realpath $(dirname $0))"
	[ $? != 0 ] && export LAMW_MGR_CORE="${0/%\/lamw_manager}" 
fi

source "$LAMW_MGR_CORE/core/headers/common-shell.sh"
source "$LAMW_MGR_CORE/core/headers/lamw_manager_headers"
source "$LAMW_MGR_CORE/core/settings-editor/root-lamw-settings-editor.sh"

GetInitialStatus(){

	tty | grep  'pts/[0-9]' > /dev/null

	[ $? = 0 ] && [ ! -e "$LAMW_INSTALL_LOG" ] && 
		AUTO_START_LAMW4LINUX=1
}
GetLocalJavaHome(){
	local lamw4linux_env="$LAMW4LINUX_HOME/etc/environment"
	if [ -e $lamw4linux_env ]; then
		export JAVA_HOME=$(grep '^export JAVA_HOME' "$lamw4linux_env" | sed 's|export JAVA_HOME=||g')
	fi	
}
StopGradleDaemon(){
	if [ -e "$LAMW_INSTALL_LOG" ] ; then
		local gradle_version="$(grep '^GRADLE_VERSION' $LAMW_INSTALL_LOG | sed 's/GRADLE_VERSION=//g')"
		local gradle_path="$ROOT_LAMW/gradle-$gradle_version"
		GetLocalJavaHome
	fi

	if [ "$gradle_path" != "" ] && [ -e "$gradle_path" ]; then 
		
		ps ax |  grep gradle | grep $ROOT_LAMW &>/dev/null
		if [ $? = 0 ]; then 
			echo "Stopping Gradle Daemons, please wait..."  
			$gradle_path/bin/gradle --stop
		fi
	fi
}

#Del lamw-overrides
DelTempFiles(){ 
	[ -e $LAMW_MANAGER_LOCK ] &&  rm $LAMW_MANAGER_LOCK
}

#Check if $USER is a sudo member 
CheckUserIsSudo(){
	grep sudo /etc/group  | grep $USER > /dev/null 2>&1
	if [ $? != 0 ]; then 
		export USE_PKEXEC=1
	fi
}

CheckFlags(){
	newPtr ref_flag="$1"
	local flagFind="$2"

	if [[ "$ARGS" =~ $flagFind  ]]; then 
		export ref_flag=1
		export ARGS=${ARGS//$flagFind/} # remove todas as ocorrencias de DEBUG=1
	fi
}

#Check if DEBUG flag is set 
getBashCMD(){
	
	if [ $DEBUG = 1 ]; then
		LAMW_MGR_INSTALL="bash -x $LAMW_MGR_INSTALL"
	fi
}

isSupportedPolkit(){
	local error_msg="${VERMELHO}Fatal error:${NORMAL} Cannot run on tty terminal!!"
	tty | grep 'pts/[0-9]'>/dev/null
}


setUseLamwManagerSetup(){
	if [ "$USE_SETUP" = "1" ];
	then 
		isSupportedPolkit
		local support_polkit=$?

		if [ $support_polkit = 0 ]; then 
			USE_PKEXEC=1
		fi

		LAMW_MANAGER_ENV+=("USE_SETUP=1")
	else
		LAMW_MANAGER_ENV+=("USE_SETUP=0")
	fi
}

CheckLocalRootLAMW(){
	if [ "$LOCAL_ROOT_LAMW" != "" ]; then
		setRootLAMW
	else 
		isVariableDeclared LOCAL_ROOT_LAMW
		if [ $? = 0 ]; then
			echo "${VERMELHO}Fatal error: LOCAL_ROOT_LAMW is declared as empty!${NORMAL}"
			exit 1
		else 
			setRootLAMW
		fi
	fi

	LAMW_MANAGER_ENV+=(ROOT_LAMW=$ROOT_LAMW)
	LAMW4LINUX_HOME=$ROOT_LAMW/lamw4linux
	LAMW_FRAMEWORK_HOME=$ROOT_LAMW/lazandroidmodulewizard
	LAMW_INSTALL_LOG="$LAMW4LINUX_HOME/lamw-install.log"
}

RunAsSudo(){
	sudo -i env ${LAMW_MANAGER_ENV[@]} $LAMW_MGR_INSTALL $*
	export EXIT_STATUS=$?
}


#Run LAMW Manager as Police Kit
RunAsPolkit(){
	isSupportedPolkit
	if [ $?  = 0 ]; then 
		LAMW_MANAGER_ENV+=(DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY)
		pkexec  env ${LAMW_MANAGER_ENV[@]} $LAMW_MGR_INSTALL $*
		export EXIT_STATUS=$?
	else
		echo $error_msg
		export EXIT_STATUS=$?
	fi
	
	[  $ENTER_TO_EXIT = 1 ] && echo "press enter to exit ..." && read
	

}

#get install status and exit
getStatus(){
	
	local status_regex='(get\-status)'

	if [[ "$*" =~ $status_regex  ]]; then 
		if [ -e "$LAMW_INSTALL_LOG" ]; then
			exit 0
		else
			exit 1
		fi
	fi
}
#Wrapper function to Run LAMW Manager
Run(){
	getStatus $*
	IsFileBusy lamw_manager $LAMW_MANAGER_LOCK
	exec 3>$LAMW_MANAGER_LOCK
	echo "" >&3
	getBashCMD
	setUseLamwManagerSetup
	if [ $USE_PKEXEC = 1 ] ; then
		RunAsPolkit $*
	else
		RunAsSudo $*
	fi
	exec 3>&-
}


cacheGradle(){
	echo "Please wait, starting caching Gradle"
	lamw_termnal="$ROOT_LAMW/lamw4linux/usr/bin/lamw4linux-terminal"
	$lamw_termnal -c cacheGradle &>/dev/null
}

CheckNeedLazarusProjectDowngradle(){
	if [ $AUTO_START_LAMW4LINUX = 0 ] && [ -e $LAMW_INSTALL_LOG ]; then
		local lazarus_version=$(grep LAZARUS_VERSION $LAMW_INSTALL_LOG)
		local lazarus_version_pattern='(2\.2\.[0-9])'

		if [[ "$lazarus_version" =~ $lazarus_version_pattern ]];then 
			RUN_DOWNGRADE_LPI=1
		fi
	fi
}

downgradeLazarusProject(){

	if [ $RUN_DOWNGRADE_LPI =1 ]; then
		local lamw_termnal="$ROOT_LAMW/lamw4linux/usr/bin/lamw4linux-terminal"
		$lamw_termnal -c DowngradleLazarusLpi 
	fi
}

autoStartLAMW4Linux(){

	if [ $EXIT_STATUS = 0 ] && [ $AUTO_START_LAMW4LINUX = 1 ] && [ -e $LAMW_INSTALL_LOG ]; then
		cacheGradle
	fi


	if [ $EXIT_STATUS = 0 ] && [ "${XDG_CURRENT_DESKTOP^^}" != "XFCE" ] && 
		[ $AUTO_START_LAMW4LINUX = 1 ] && [ -e $LAMW_INSTALL_LOG ];then
		echo "Please wait, starting ${NEGRITO}LAMW4Linux IDE${NORMAL} ..."
		startlamw4linux &>/dev/null &
	fi

	exit $EXIT_STATUS
}

#main function
main(){
	
	IsUserRoot "lamw_manager"
	CheckFlags DEBUG "DEBUG=1"
	CheckFlags USE_PKEXEC "PKEXEC=1"
	CheckFlags ENTER_TO_EXIT "ENTER=1"
	CheckUserIsSudo
	CheckLocalRootLAMW
	GetInitialStatus
	CheckNeedLazarusProjectDowngradle
	StopGradleDaemon
	Run $ARGS
	DelTempFiles
	downgradeLazarusProject
	autoStartLAMW4Linux
}

main $*